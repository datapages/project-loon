[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Loon",
    "section": "",
    "text": "Welcome to the datapage for Project Loon data! This dataset consists of 385 balloon flights, split into 938 data segments. For more details on the dataset, please see the About tab. On this page, we offer several tools to select and visualize data from individual balloons. The raw data can be viewed and downloaded from the Data tab, and the Analysis tab offers other data access and analysis tools. We’re currently working on more tools to visualize and access the data, so stay tuned!\n\n\n\n\n\n\n\nImage from Wikipedia by Flickr user Wasting Frames, license CC BY 2.0.\nfunction interval(range = [], options = {}) {\n  const [min = 0, max = 1] = range;\n  const {\n    step = .001,\n    label = null,\n    value = [min, max],\n    format = ([start, end]) =&gt; `${start} … ${end}`,\n    color,\n    width,\n    theme,\n    __ns__ = randomScope(),\n  } = options;\n\n  const css = `\n#${__ns__} {\n  font: 13px/1.2 var(--sans-serif);\n  display: flex;\n  align-items: baseline;\n  flex-wrap: wrap;\n  max-width: 100%;\n  width: auto;\n}\n@media only screen and (min-width: 30em) {\n  #${__ns__} {\n    flex-wrap: nowrap;\n    width: 360px;\n  }\n}\n#${__ns__} .label {\n  width: 120px;\n  padding: 5px 0 4px 0;\n  margin-right: 6.5px;\n  flex-shrink: 0;\n}\n#${__ns__} .form {\n  display: flex;\n  width: 100%;\n}\n#${__ns__} .range {\n  flex-shrink: 1;\n  width: 100%;\n}\n#${__ns__} .range-slider {\n  width: 100%;\n}\n  `;\n  \n  const $range = rangeInput({min, max, value: [value[0], value[1]], step, color, width, theme});\n  const $output = html`&lt;output&gt;`;\n  const $view = html`&lt;div id=${__ns__}&gt;\n${label == null ? '' : html`&lt;div class=\"label\"&gt;${label}`}\n&lt;div class=form&gt;\n  &lt;div class=range&gt;\n    ${$range}&lt;div class=range-output&gt;${$output}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n${html`&lt;style&gt;${css}`}\n  `;\n\n  const update = () =&gt; {\n    const content = format([$range.value[0], $range.value[1]]);\n    if(typeof content === 'string') $output.value = content;\n    else {\n      while($output.lastChild) $output.lastChild.remove();\n      $output.appendChild(content);\n    }\n  };\n  $range.oninput = update;\n  update();\n  \n  return Object.defineProperty($view, 'value', {\n    get: () =&gt; $range.value,\n    set: ([a, b]) =&gt; {\n      $range.value = [a, b];\n      update();\n    },\n  });\n}\n\nfunction rangeInput(options = {}) {\n  const {\n    min = 0,\n    max = 100,\n    step = 'any',\n    value: defaultValue = [min, max],\n    color,\n    width,\n    theme = theme_Flat,\n  } = options;\n  \n  const controls = {};\n  const scope = randomScope();\n  const clamp = (a, b, v) =&gt; v &lt; a ? a : v &gt; b ? b : v;\n\n  // Will be used to sanitize values while avoiding floating point issues.\n  const input = html`&lt;input type=range ${{min, max, step}}&gt;`;\n  \n  const dom = html`&lt;div class=${`${scope} range-slider`} style=${{\n    color,\n    width: cssLength(width),\n  }}&gt;\n  ${controls.track = html`&lt;div class=\"range-track\"&gt;\n    ${controls.zone = html`&lt;div class=\"range-track-zone\"&gt;\n      ${controls.range = html`&lt;div class=\"range-select\" tabindex=0&gt;\n        ${controls.min = html`&lt;div class=\"thumb thumb-min\" tabindex=0&gt;`}\n        ${controls.max = html`&lt;div class=\"thumb thumb-max\" tabindex=0&gt;`}\n      `}\n    `}\n  `}\n  ${html`&lt;style&gt;${theme.replace(/:scope\\b/g, '.'+scope)}`}\n&lt;/div&gt;`;\n\n  let value = [], changed = false;\n  Object.defineProperty(dom, 'value', {\n    get: () =&gt; [...value],\n    set: ([a, b]) =&gt; {\n      value = sanitize(a, b);\n      updateRange();\n    },\n  });\n\n  const sanitize = (a, b) =&gt; {\n    a = isNaN(a) ? min : ((input.value = a), input.valueAsNumber);\n    b = isNaN(b) ? max : ((input.value = b), input.valueAsNumber);\n    return [Math.min(a, b), Math.max(a, b)];\n  }\n  \n  const updateRange = () =&gt; {\n    const ratio = v =&gt; (v - min) / (max - min);\n    dom.style.setProperty('--range-min', `${ratio(value[0]) * 100}%`);\n    dom.style.setProperty('--range-max', `${ratio(value[1]) * 100}%`);\n  };\n\n  const dispatch = name =&gt; {\n    dom.dispatchEvent(new Event(name, {bubbles: true}));\n  };\n  const setValue = (vmin, vmax) =&gt; {\n    const [pmin, pmax] = value;\n    value = sanitize(vmin, vmax);\n    updateRange();\n    // Only dispatch if values have changed.\n    if(pmin === value[0] && pmax === value[1]) return;\n    dispatch('input');\n    changed = true;\n  };\n  \n  setValue(...defaultValue);\n  \n  // Mousemove handlers.\n  const handlers = new Map([\n    [controls.min, (dt, ov) =&gt; {\n      const v = clamp(min, ov[1], ov[0] + dt * (max - min));\n      setValue(v, ov[1]);\n    }],\n    [controls.max, (dt, ov) =&gt; {\n      const v = clamp(ov[0], max, ov[1] + dt * (max - min));\n      setValue(ov[0], v);\n    }],\n    [controls.range, (dt, ov) =&gt; {\n      const d = ov[1] - ov[0];\n      const v = clamp(min, max - d, ov[0] + dt * (max - min));\n      setValue(v, v + d);\n    }],\n  ]);\n  \n  // Returns client offset object.\n  const pointer = e =&gt; e.touches ? e.touches[0] : e;\n  // Note: Chrome defaults \"passive\" for touch events to true.\n  const on  = (e, fn) =&gt; e.split(' ').map(e =&gt; document.addEventListener(e, fn, {passive: false}));\n  const off = (e, fn) =&gt; e.split(' ').map(e =&gt; document.removeEventListener(e, fn, {passive: false}));\n  \n  let initialX, initialV, target, dragging = false;\n  function handleDrag(e) {\n    // Gracefully handle exit and reentry of the viewport.\n    if(!e.buttons && !e.touches) {\n      handleDragStop();\n      return;\n    }\n    dragging = true;\n    const w = controls.zone.getBoundingClientRect().width;\n    e.preventDefault();\n    handlers.get(target)((pointer(e).clientX - initialX) / w, initialV);\n  }\n  \n  \n  function handleDragStop(e) {\n    off('mousemove touchmove', handleDrag);\n    off('mouseup touchend', handleDragStop);\n    if(changed) dispatch('change');\n  }\n  \n  invalidation.then(handleDragStop);\n  \n  dom.ontouchstart = dom.onmousedown = e =&gt; {\n    dragging = false;\n    changed = false;\n    if(!handlers.has(e.target)) return;\n    on('mousemove touchmove', handleDrag);\n    on('mouseup touchend', handleDragStop);\n    e.preventDefault();\n    e.stopPropagation();\n    \n    target = e.target;\n    initialX = pointer(e).clientX;\n    initialV = value.slice();\n  };\n  \n  controls.track.onclick = e =&gt; {\n    if(dragging) return;\n    changed = false;\n    const r = controls.zone.getBoundingClientRect();\n    const t = clamp(0, 1, (pointer(e).clientX - r.left) / r.width);\n    const v = min + t * (max - min);\n    const [vmin, vmax] = value, d = vmax - vmin;\n    if(v &lt; vmin) setValue(v, v + d);\n    else if(v &gt; vmax) setValue(v - d, v);\n    if(changed) dispatch('change');\n  };\n  \n  return dom;\n}\n\nfunction randomScope(prefix = 'scope-') {\n  return prefix + (performance.now() + Math.random()).toString(32).replace('.', '-');\n}\n\ncssLength = v =&gt; v == null ? null : typeof v === 'number' ? `${v}px` : `${v}`\n\nhtml = htl.html\n\ntheme_Flat = `\n/* Options */\n:scope {\n  color: #3b99fc;\n  width: 240px;\n}\n\n:scope {\n  position: relative;\n  display: inline-block;\n  --thumb-size: 15px;\n  --thumb-radius: calc(var(--thumb-size) / 2);\n  padding: var(--thumb-radius) 0;\n  margin: 2px;\n  vertical-align: middle;\n}\n:scope .range-track {\n  box-sizing: border-box;\n  position: relative;\n  height: 7px;\n  background-color: hsl(0, 0%, 80%);\n  overflow: visible;\n  border-radius: 4px;\n  padding: 0 var(--thumb-radius);\n}\n:scope .range-track-zone {\n  box-sizing: border-box;\n  position: relative;\n}\n:scope .range-select {\n  box-sizing: border-box;\n  position: relative;\n  left: var(--range-min);\n  width: calc(var(--range-max) - var(--range-min));\n  cursor: ew-resize;\n  background: currentColor;\n  height: 7px;\n  border: inherit;\n}\n/* Expands the hotspot area. */\n:scope .range-select:before {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: var(--thumb-size);\n  left: 0;\n  top: calc(2px - var(--thumb-radius));\n}\n:scope .range-select:focus,\n:scope .thumb:focus {\n  outline: none;\n}\n:scope .thumb {\n  box-sizing: border-box;\n  position: absolute;\n  width: var(--thumb-size);\n  height: var(--thumb-size);\n\n  background: #fcfcfc;\n  top: -4px;\n  border-radius: 100%;\n  border: 1px solid hsl(0,0%,55%);\n  cursor: default;\n  margin: 0;\n}\n:scope .thumb:active {\n  box-shadow: inset 0 var(--thumb-size) #0002;\n}\n:scope .thumb-min {\n  left: calc(-1px - var(--thumb-radius));\n}\n:scope .thumb-max {\n  right: calc(-1px - var(--thumb-radius));\n}\n`\nPlot = import(\"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm\")\n\n// load and authorize redivis\nredivis = require(\"redivis\")\n//auth = redivis.authorize({ apiToken: REDIVIS_API_TOKEN })\n\n// formatting function for how two ended slider displays selected range\ninterval_format = ([start, end]) =&gt; `[${start}, ${end}]`\n\n// array of seasons for season selector\nseasons = [\"spring\", \"summer\", \"fall\", \"winter\"]\n\n// all segments\ns = transpose(segments)\n\n// all segments' data\nd = transpose(data).map(d =&gt; ({ ...d, time: new Date(d.time) }))\nns = Inputs.text().classList[0]\n\n// custom css to override some ojs defaults for inputs\nhtml`&lt;style&gt;\n\n  .${ns} {\n    --label-width: 70px;\n  }\n\n  .${ns} div label {\n    background-color: #f4f4f4;\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.5rem;\n    margin-right: 0.25rem;\n    width: auto;\n  }\n  \n  .${ns} div label:hover,\n  .${ns} div label:active,\n  .${ns} div label:focus {\n    background-color: #cdecff;\n  }\n  \n  .${ns} div input[type=\"number\"] {\n    background-color: #f4f4f4;\n    padding: 0.25rem 0.5rem;\n    border-radius: 0.5rem;\n    flex-shrink: 3;\n    border: none;\n  }\n  \n  .${ns} select {\n    background-color: #f4f4f4;\n    border: none;\n    border-radius: 0.5rem;\n    padding: 0.25rem 0.5rem;\n    width: auto;\n  }\n  \n}\n&lt;/style&gt;`"
  },
  {
    "objectID": "index.html#data-query-code-snippet",
    "href": "index.html#data-query-code-snippet",
    "title": "Project Loon",
    "section": "Data query code snippet",
    "text": "Data query code snippet"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Project Loon",
    "section": "",
    "text": "You can access the project_loon data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"sdss\")\ndataset &lt;- user$dataset(\"project_loon\")\ntable &lt;- dataset$table(\"loon\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble(max_results = 100)\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"sdss\")\ndataset = user.dataset(\"project_loon\")\ntable = dataset.table(\"loon\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe(max_results = 100)\nView documentation"
  },
  {
    "objectID": "analysis.html#programmatic-access",
    "href": "analysis.html#programmatic-access",
    "title": "Project Loon",
    "section": "",
    "text": "You can access the project_loon data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"sdss\")\ndataset &lt;- user$dataset(\"project_loon\")\ntable &lt;- dataset$table(\"loon\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble(max_results = 100)\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"sdss\")\ndataset = user.dataset(\"project_loon\")\ntable = dataset.table(\"loon\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe(max_results = 100)\nView documentation"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Project Loon",
    "section": "",
    "text": "The purpose of this dataset is to offer an estimate of the horizontal momentum fluxed vertically by the atmospheric internal gravity waves (GWs) observed by Project Loon balloons. This vertical flux of horizontal momentum is commonly referred to as the GW momentum flux. Before estimating the GW momentum fluxes, additional processing was necessary to remove data sampling errors, irregularities, and balloon maneuvering.\n\n\n\nThe procedures for this processing, and the subsequent analysis of the processed data, are described in Green et al. (2024). The Python code (in Jupyter notebooks) that was used for both is available at: https://github.com/DataWaveProject/Loon-momentum-fluxes.\n\n\n\nSee the following sample project for examples: https://redivis.com/projects/q08b-889vc3xgg."
  },
  {
    "objectID": "about.html#project-loon",
    "href": "about.html#project-loon",
    "title": "Project Loon",
    "section": "",
    "text": "The purpose of this dataset is to offer an estimate of the horizontal momentum fluxed vertically by the atmospheric internal gravity waves (GWs) observed by Project Loon balloons. This vertical flux of horizontal momentum is commonly referred to as the GW momentum flux. Before estimating the GW momentum fluxes, additional processing was necessary to remove data sampling errors, irregularities, and balloon maneuvering.\n\n\n\nThe procedures for this processing, and the subsequent analysis of the processed data, are described in Green et al. (2024). The Python code (in Jupyter notebooks) that was used for both is available at: https://github.com/DataWaveProject/Loon-momentum-fluxes.\n\n\n\nSee the following sample project for examples: https://redivis.com/projects/q08b-889vc3xgg."
  }
]