[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Loon",
    "section": "",
    "text": "Welcome to the Datapages site for Project Loon data! For more details on the dataset, please see the About tab. On this page, we offer several tools to select and visualize data from individual balloons. The raw data can be viewed and downloaded from the Data tab, and the Analysis tab offers other data access and analysis tools. We’re currently working on more tools to visualize and access the data, so stay tuned!\nIn this dataset, there are 385 balloon flights, split into 938 data segments. The figure on the right shows the number of unique flights that passed through each 5 degree latitude by 10 degree longitude grid cell.\n\n    \n    \n  \n\n\n\nimport {interval} from '@mootari/range-slider' // two ended slider\n\nd = transpose(data).map(d =&gt; ({ ...d, time: new Date(d.time) }))\ntd = d.filter(d =&gt; d.segment_id == segment)\n\n// find minimal radius circle that includes entire flight path\nminLon = d3.min(td.map(d =&gt; d.longitude))\nmaxLon = d3.max(td.map(d =&gt; d.longitude))\nminLat = d3.min(td.map(d =&gt; d.latitude))\nmaxLat = d3.max(td.map(d =&gt; d.latitude))\ncenter = [(minLon + maxLon) / 2, (minLat + maxLat) / 2]\ncorners = [[minLon, minLat], [minLon, maxLat], [maxLon, minLat], [maxLon, maxLat]]\ndist = d3.max(corners, corner =&gt; d3.geoDistance(center, corner))\nradius = dist * (180 / Math.PI)\ncircle = d3.geoCircle().center(center).radius(radius)()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof segment = Inputs.select(Array.from(new Set(d.map(d =&gt; d.segment_id))),\n                               {label: \"Segment ID\"})\n//viewof projection = Inputs.select([\"azimuthal-equidistant\", \"equal-earth\"],\n//                                  {label: \"Projection\"})\n\n\n\n\n\n\nworld = FileAttachment(\"countries-110m.json\").json()\nland = topojson.feature(world, world.objects.land)\n\nviewof map_world = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  projection: { type: \"equal-earth\" },\n  marks: [\n    //Plot.frame(),\n    Plot.sphere(),\n    Plot.graticule(),\n    Plot.geo(land, {fill: \"lightgrey\"}),\n    Plot.dot(td.slice(1), {\n      x: \"longitude\", y: \"latitude\",\n      r: 1, stroke: \"black\", strokeOpacity: 0.2,\n    }),\n    Plot.dot(td.slice(0, 1), {\n      x: \"longitude\", y: \"latitude\",\n      r: 3, stroke: \"red\", strokeOpacity: 1, symbol: \"plus\"\n    }),\n    Plot.dot(td.slice(td.length - 1, td.length), {\n      x: \"longitude\", y: \"latitude\",\n      r: 3, stroke: \"red\", strokeOpacity: 1, symbol: \"times\"\n    })\n  ],\n})\n\nviewof map_zoom = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  projection: { type: \"azimuthal-equidistant\", domain: circle },\n  marks: [\n    Plot.frame(),\n    Plot.graticule(),\n    Plot.geo(land, {fill: \"lightgrey\"}),\n//    Plot.dot(transpose(cor), {\n//      x: \"longitude\", y: \"latitude\",\n//      r: 3, stroke: \"blue\", //strokeOpacity: 0.2,\n//    }),\n    Plot.dot(td.slice(1), {\n      x: \"longitude\", y: \"latitude\",\n      r: 1, stroke: \"black\", strokeOpacity: 0.2,\n    }),\n    Plot.dot(td.slice(0, 1), {\n      x: \"longitude\", y: \"latitude\",\n      r: 6, stroke: \"red\", strokeOpacity: 1, symbol: \"plus\"\n    }),\n    Plot.dot(td.slice(td.length - 1, td.length), {\n      x: \"longitude\", y: \"latitude\",\n      r: 6, stroke: \"red\", strokeOpacity: 1, symbol: \"times\"\n    })\n  ],\n})\nviewof scatter_alt = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 900,\n  height: 200,\n  inset: 8,\n  grid: true,\n  y: { label: \"Altitude (meters)\" },\n  marks: [\n    Plot.dot(td, { x: \"time\", y: \"altitude\", r: 0.5 }),\n  ]\n})\n\nwinds = new Map([[\"Zonal (east-west)\", \"wind_u\"],\n                 [\"Meridional (north-south)\", \"wind_v\"]])\nviewof y_wind = Inputs.select(winds, {label: \"Wind direction\"})\n\nviewof scatter_wind = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 900,\n  height: 200,\n  inset: 8,\n  grid: true,\n  y: { label: \"Velocity (meters/second)\" },\n  marks: [\n    Plot.dot(td, { x: \"time\", y: y_wind, r: 0.5 }),\n  ]\n})\n\nfluxes = new Map([[\"East\", \"flux_east\"], [\"West\", \"flux_west\"],\n                  [\"North\", \"flux_north\"], [\"South\", \"flux_south\"]])\nviewof y_flux = Inputs.select(fluxes, {label: \"Flux direction\"})\n\nviewof scatter_flux = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 900,\n  height: 200,\n  inset: 8,\n  grid: true,\n  y: { label: \"Flux (pascals)\", transform: (f) =&gt; f * 1000 },\n  marks: [\n    Plot.dot(td, { x: \"time\", y: y_flux, r: 0.5 }),\n  ]\n})"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Project Loon",
    "section": "",
    "text": "The purpose of this dataset is to offer an estimate of the horizontal momentum fluxed vertically by the atmospheric internal gravity waves (GWs) observed by Project Loon balloons. This vertical flux of horizontal momentum is commonly referred to as the GW momentum flux. Before estimating the GW momentum fluxes, additional processing was necessary to remove data sampling errors, irregularities, and balloon maneuvering.\n\n\n\nThe procedures for this processing, and the subsequent analysis of the processed data, are described in Green et al. (2024). The Python code (in Jupyter notebooks) that was used for both is available at: https://github.com/DataWaveProject/Loon-momentum-fluxes.\n\n\n\nSee the following sample project for examples: https://redivis.com/projects/q08b-889vc3xgg."
  },
  {
    "objectID": "about.html#project-loon",
    "href": "about.html#project-loon",
    "title": "Project Loon",
    "section": "",
    "text": "The purpose of this dataset is to offer an estimate of the horizontal momentum fluxed vertically by the atmospheric internal gravity waves (GWs) observed by Project Loon balloons. This vertical flux of horizontal momentum is commonly referred to as the GW momentum flux. Before estimating the GW momentum fluxes, additional processing was necessary to remove data sampling errors, irregularities, and balloon maneuvering.\n\n\n\nThe procedures for this processing, and the subsequent analysis of the processed data, are described in Green et al. (2024). The Python code (in Jupyter notebooks) that was used for both is available at: https://github.com/DataWaveProject/Loon-momentum-fluxes.\n\n\n\nSee the following sample project for examples: https://redivis.com/projects/q08b-889vc3xgg."
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Project Loon",
    "section": "",
    "text": "You can access the project_loon data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"sdss\")\ndataset &lt;- user$dataset(\"project_loon\")\ntable &lt;- dataset$table(\"loon\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble()\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"sdss\")\ndataset = user.dataset(\"project_loon\")\ntable = dataset.table(\"loon\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  },
  {
    "objectID": "analysis.html#programmatic-access",
    "href": "analysis.html#programmatic-access",
    "title": "Project Loon",
    "section": "",
    "text": "You can access the project_loon data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"sdss\")\ndataset &lt;- user$dataset(\"project_loon\")\ntable &lt;- dataset$table(\"loon\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble()\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"sdss\")\ndataset = user.dataset(\"project_loon\")\ntable = dataset.table(\"loon\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  }
]