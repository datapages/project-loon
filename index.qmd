---
title: "Project Loon"
about:
  id: blurb
  template: solana
  image: images/unique_flights_map.jpg
  image-width: 50%
---

::: {#blurb}
Welcome to the datapage for Project Loon data! For more details on the dataset, please see the About tab. On this page, we offer several tools to select and visualize data from individual balloons. The raw data can be viewed and downloaded from the Data tab, and the Analysis tab offers other data access and analysis tools. We're currently working on more tools to visualize and access the data, so stay tuned!

In this dataset, there are 385 balloon flights, split into 938 data segments. The figure on the right shows the number of unique flights that passed through each 5 degree latitude by 10 degree longitude grid cell.
:::

-----

```{r}
project <- redivis::user("mikabr")$project("project_loon")

# segments data -- downsampled for now
downsample <- project$table("downsample_x10_output")$to_tibble()

# by-segment summary
segments <- project$table("segment_summary_output")$to_tibble()

# determine which season(s) each segment overlaps with
source("astro_seasons.R")
segments_coded <- segments |>
  dplyr::mutate(season = purrr::map2(time_start, time_end, get_seasons),
                duration = as.numeric(time_end - time_start))

ojs_define(data = downsample)
ojs_define(segments = segments_coded)
```

```{ojs}
import {interval} from '@mootari/range-slider' // two ended slider
interval_format = ([start, end]) => `[${start}, ${end}]`

seasons = ["spring", "summer", "fall", "winter"]
filter_error = '<p class="filter-error"><i class="bi bi-exclamation-triangle"></i> No segments match selected filters</p>'

// all segments
s = transpose(segments)

// all segments' data
d = transpose(data).map(d => ({ ...d, time: new Date(d.time) }))
```

```{ojs}
// get ojs class namespace
ns = Inputs.text().classList[0]

// custom css to override some ojs defaults for inputs
html`<style>

  .${ns} {
    --label-width: 70px;
  }

  .${ns} div label {
    background-color: #f4f4f4;
    padding: 0.25rem 0.5rem;
    border-radius: 0.5rem;
    margin-right: 0.25rem;
    width: auto;
  }
  
  .${ns} div label:hover,
  .${ns} div label:active,
  .${ns} div label:focus {
    background-color: #cdecff;
  }
  
  .${ns} div input[type="number"] {
    background-color: #f4f4f4;
    padding: 0.25rem 0.5rem;
    border-radius: 0.5rem;
    flex-shrink: 3;
    border: none;
  }
  
  .${ns} select {
    background-color: #f4f4f4;
    border: none;
    border-radius: 0.5rem;
    padding: 0.25rem 0.5rem;
    width: auto;
  }
}
</style>`
```

::: {.panel-sidebar}

_Use these filters to narrow down the list of segments, and then select an individual segment from this list below to visualize its trajectory and telemetry._

::: {.filters}
```{ojs}
// filter by season(s)
viewof season = Inputs.checkbox(seasons, {value: seasons, label: "Season (astronomical)"})
//viewof season = Inputs.checkbox(seasons, {value: ["winter"], label: "Season (astronomical)"})
```

```{ojs}
// filter by range of longitudes
viewof longitude_range = interval([-180, 180], {
  step: 1, label: "Longitudes", width: "80%", format: interval_format
})
```

```{ojs}
// filter by range of latitudes
viewof latitude_range = interval([-90, 90], {
  step: 1, label: "Latitudes", width: "80%", format: interval_format
})
```

```{ojs}
// filter by range of durations
viewof duration_range = interval([0, 100], {
  step: 1, label: "Duration (days)", width: "80%", format: interval_format
})
```
:::

```{ojs}
// filtered segments
sf = s.filter(d => season.some(se => d.season.includes(se)))
      .filter(d => d.longitude_min <= longitude_range[1] &
                   d.longitude_max >= longitude_range[0])
      .filter(d => d.latitude_min <= latitude_range[1] &
                   d.latitude_max >= latitude_range[0])
      .filter(d => d.duration >= duration_range[0] &
                   d.duration <= duration_range[1])

// filtered segments' IDs
sf_id = sf.map(d => d.segment_id)

// filtered segments' data
df = d.filter(d => sf_id.includes(d.segment_id))
```

:::

::: {.panel-center}

```{ojs}
// https://github.com/martynafford/natural-earth-geojson/tree/master/110m/physical
land = FileAttachment("topo/ne_110m_land.json").json()
ocean = FileAttachment("topo/ne_110m_ocean.json").json()

land_color = "wheat"
ocean_color = "#8398aa"

// map -- globe
viewof map_globe = Plot.plot({
  width: 400,
  projection: {type: "orthographic", rotate: [-longitude, -latitude]},
  marks: [
    Plot.sphere(),
    Plot.graticule(),
    Plot.geo(ocean, {fill: ocean_color, opacity: 0.7}),
    Plot.geo(land, {fill: land_color}),
    Plot.line(df, {
      x: "longitude", y: "latitude", z: "segment_id",
      r: 0.8, stroke: "grey", strokeOpacity: 0.8,
    }),
  ]
})
```

::: {.small}
```{ojs}
// selectors for coordinates of center of globe
viewof longitude = Inputs.range([-180, 180], {label: "Longitude", step: 1, value: -30})
viewof latitude = Inputs.range([-90, 90], {label: "Latitude", step: 1, value: 0})
```
:::

:::

-----

::: {layout="[[1], [0.5,1]]"}

```{ojs}
d_found = sf.length > 0
html`${d_found ? '' : filter_error}`

// selector for individual segment
dg = d3.group(df, d => d.segment_id)
viewof ds = Inputs.select(dg, {
  value: dg.get(112),
  format: ([k, v]) => `Segment ${k} (Flight ${v[0].flight_id})`
})
```

```{ojs}
// map -- whole world equirectangular
d_found ? Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  projection: { type: "equirectangular" },
  marks: [
    //Plot.sphere(),
    Plot.frame(),
    Plot.graticule(),
    Plot.geo(land, {fill: "lightgrey"}),
    Plot.line(ds, {
      x: "longitude", y: "latitude",
      r: 1, stroke: "black", strokeOpacity: 0.2,
    }),
    Plot.dot(ds.slice(0, 1), {
      x: "longitude", y: "latitude",
      r: 3, stroke: "red", strokeOpacity: 1, symbol: "plus"
    }),
    Plot.dot(ds.slice(ds.length - 1, ds.length), {
      x: "longitude", y: "latitude",
      r: 3, stroke: "red", strokeOpacity: 1, symbol: "times"
    })
  ],
}) : html``

// find minimal radius circle that includes entire flight path
get_circle = (seg) => {
  const minLon = d3.min(seg.map(d => d.longitude))
  const maxLon = d3.max(seg.map(d => d.longitude))
  const minLat = d3.min(seg.map(d => d.latitude))
  const maxLat = d3.max(seg.map(d => d.latitude))
  const center = [(minLon + maxLon) / 2, (minLat + maxLat) / 2]
  const corners = [[minLon, minLat], [minLon, maxLat], [maxLon, minLat], [maxLon, maxLat]]
  const dist = d3.max(corners, corner => d3.geoDistance(center, corner))
  const radius = dist * (180 / Math.PI)
  const circle = d3.geoCircle().center(center).radius(radius)()
  return circle
}

circle = d_found ? get_circle(ds) : null

// map -- zoomed in azimuthal
d_found ? Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  projection: { type: "azimuthal-equidistant", domain: circle },
  marks: [
    Plot.frame(),
    Plot.graticule(),
    Plot.geo(land, {fill: "lightgrey"}),
    Plot.line(ds, {
      x: "longitude", y: "latitude",
      r: 1, stroke: "black", strokeOpacity: 0.2,
    }),
    Plot.dot(ds.slice(0, 1), {
      x: "longitude", y: "latitude",
      r: 6, stroke: "red", strokeOpacity: 1, symbol: "plus"
    }),
    Plot.dot(ds.slice(ds.length - 1, ds.length), {
      x: "longitude", y: "latitude",
      r: 6, stroke: "red", strokeOpacity: 1, symbol: "times"
    })
  ],
}) : html``
```

::: {.small}
```{ojs}
// timeseries -- altitude
d_found ? Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  width: 900,
  height: 200,
  inset: 8,
  grid: true,
  y: { label: "Altitude (meters)" },
  marks: [
    Plot.dot(ds, { x: "time", y: "altitude", r: 0.5 }),
  ]
}) : html``

// timeseries -- winds
winds = new Map([["Zonal (east-west)", "wind_u"],
                 ["Meridional (north-south)", "wind_v"]])
viewof y_wind = Inputs.select(winds, {label: "Wind"})

viewof scatter_wind = Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  width: 900,
  height: 200,
  inset: 8,
  grid: true,
  y: { label: "Velocity (meters/second)" },
  marks: [
    Plot.dot(ds, { x: "time", y: y_wind, r: 0.5 }),
  ]
})

d_found ? html`
  ${viewof y_wind}
  ${viewof scatter_wind}
` : html``

// timeseries -- fluxes
fluxes = new Map([["Eastward", "flux_east"], ["Westward", "flux_west"],
                  ["Northward", "flux_north"], ["Southward", "flux_south"]])
viewof y_flux = Inputs.select(fluxes, {label: "Flux"})

viewof scatter_flux = Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  width: 900,
  height: 200,
  inset: 8,
  grid: true,
  y: { label: "Flux (millipascals)", transform: (f) => Math.abs(f * 1000) },
  marks: [
    Plot.dot(ds, { x: "time", y: y_flux, r: 0.5 }),
  ]
})

d_found ? html`
  ${viewof y_flux}
  ${viewof scatter_flux}
` : html``
```
:::

:::
