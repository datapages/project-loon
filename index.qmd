:::: {.columns}

::: {.column width="63%"}
::: {.blurb}
# Project Loon

Welcome to the Datapages site for Project Loon data! Loon balloons were "superpressure" balloons: the pressure inside their envelopes was larger than the ambient pressure, so they drifted on surfaces of constant density. In this dataset, there are 385 balloon flights, split into 938 data segments, all at least two days long and corresponding to intervals when the balloons were passively drifting in the lower stratosphere. For more details on the dataset, please see the About tab. The full dataset on Redivis can be accessed from the Data tab, and the Analysis tab offers tools to access the dataset using R or Python.

On this page, we offer several tools to select, visualize, and download data from individual balloons and groups of balloons. Immediately below you will find a tool that allows you to select and plot the trajectories of a subset of data segments based on the time of year the data were collected and where the balloons flew. You can download a downsampled (10x, or one data point every 20 minutes) version of the dataset that includes just the selected segments, or generate a code snippet in R or Python that loads the complete dataset for those segments. To avoid accidentally accessing unnecessarily large quantities of data, the code snippet only loads 100 rows of data by default; to load all the selected data, comment out the "LIMIT 100" line.

Below that we offer an additional set of plotting tools for individual data segments drawn from the subset of segments selected earlier. Time series of the balloon's altitude, horizontal velocities, and analyzed gravity wave momentum flux are plotted from the downsampled data, which are shown in a table at the bottom. There is an option to download the segment's complete data. After clicking the "Download segment" button and logging in to Redivis, please wait a couple seconds for the data to be prepared for download.
:::
:::

::: {.column width="2%"}
:::

::: {.column width="35%"}
![Image from [Wikipedia](https://commons.wikimedia.org/wiki/Category:Project_Loon#/media/File:Google_Loon_-_Launch_Event.jpg) by Flickr user Wasting Frames, license [CC BY 2.0](https://creativecommons.org/licenses/by/2.0).](images/google_loon_launch_event.jpg)
:::

::::

-----


{{< include components/_load_data.qmd >}}

{{< include components/_interval.qmd >}}

```{ojs prelims}
// import newer version of observable plot than the one embedded in quarto 
Plot = import("https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm")

// load and authorize redivis
redivis = require("redivis")
//auth = redivis.authorize({ apiToken: REDIVIS_API_TOKEN })

// formatting function for how two ended slider displays selected range
interval_format = ([start, end]) => `[${start}, ${end}]`

// array of seasons for season selector
seasons = ["spring", "summer", "fall", "winter"]

// all segments
s = transpose(segments)

// all segments' data
d = transpose(data).map(d => ({ ...d, time: new Date(d.time) }))
```

{{< include components/_style.qmd >}}

:::: {.panel-sidebar}

_Use these filters to narrow down the list of segments, and then select an individual segment from this list below to visualize its trajectory and telemetry. The cursor hover text on the map is the segment ID._

::: {.side-inputs}

::: {.filters-container}
```{ojs filter-season}
// filter by season(s)
viewof season = Inputs.checkbox(seasons, {value: seasons, label: "Season (astronomical, northern hemisphere)"})
```

```{ojs filter-longitude}
// filter by range of longitudes
viewof longitude_range = interval([-180, 180], {
  step: 1, label: "Longitudes", width: "80%", format: interval_format
})
```

```{ojs filter-latitude}
// filter by range of latitudes
viewof latitude_range = interval([-90, 90], {
  step: 1, label: "Latitudes", width: "80%", format: interval_format
})
```

```{ojs filter-duration}
// filter by range of durations
viewof duration_range = interval([0, 100], {
  step: 1, label: "Duration (days)", width: "80%", format: interval_format
})
```
:::

::: {.download-button-container}
```{ojs download-button}
// callback function for download button
function download(filename, text) {
  var element = document.createElement("a");
  element.setAttribute(
    "href",
    "data:text/csv;charset=utf-8," + encodeURIComponent(text)
  );
  element.setAttribute("download", filename);

  element.style.display = "none";
  document.body.appendChild(element);

  element.click();

  document.body.removeChild(element);
}

// callback helper -- array to csv
function convertToCSV(arr) {
  const array = [Object.keys(arr[0])].concat(arr);

  return array
    .map((it) => {
      return Object.values(it).toString();
    })
    .join("\n");
}

// download data button
download_button = {
  let button = Inputs.button(html`Download ${sf.length} segment${sf.length != 1 ? "s" : ""} (downsampled)`);
  button.addEventListener("click", function () {
    download("project_loon_filtered.csv", convertToCSV(df));
  });
  return button;
}
```
:::


::: {.generate-snippet-container}
```{ojs code-snippets}
// simple templating function: replace strings of the form "{{variable}}" in the
// template with the corresponding value from values
function fillTemplate(template, values) {
  return template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
    return values[key] !== undefined ? values[key] : match;
  });
};

function generateSeasonCondition(seasons) {
  if (!seasons || seasons.length === 0) {
    return '';
  }
  return seasons.map(season => `segments.${season}`).join(' OR ');
}

// read in template files
sql_template = FileAttachment("resources/templates/query.sql").text();
r_template = FileAttachment("resources/templates/query_snippet.R").text();
py_template = FileAttachment("resources/templates/query_snippet.py").text();

// create sql query using input filter values, indent all lines
sql_query = fillTemplate(sql_template, {
  longitude_min: longitude_range[0],
  longitude_max: longitude_range[1],
  latitude_min: latitude_range[0],
  latitude_max: latitude_range[1],
  duration_min: duration_range[0],
  duration_max: duration_range[1],
  season_statement: generateSeasonCondition(season)
}).replace(/^/gm, '  ');


// create r and python code snippets with sql query
r_snippet = () => fillTemplate(r_template, { query: sql_query });
py_snippet = () => fillTemplate(py_template.trim(), { query: sql_query });
```


{{< include components/_modal.qmd >}}
:::
:::
::::

:::: {.panel-center}

```{ojs data-filtered}
// filtered segments
sf = s.filter(d => season.some(se => d.season.includes(se))) // by season
      .filter(d => d.longitude_min >= longitude_range[0] & // by longitude
                   d.longitude_max <= longitude_range[1])
      .filter(d => d.latitude_min >= latitude_range[0] & // by latitude
                   d.latitude_max <= latitude_range[1])
      .filter(d => d.duration >= duration_range[0] & // by duration
                   d.duration <= duration_range[1])

// filtered segments' IDs
sf_id = sf.map(d => d.segment_id)

// filtered segments' data
df = d.filter(d => sf_id.includes(d.segment_id))
```

```{ojs globe}
// topoJSON objects for map features
// https://github.com/martynafford/natural-earth-geojson/tree/master/110m/physical
land = FileAttachment("resources/topo/ne_110m_land.json").json()
ocean = FileAttachment("resources/topo/ne_110m_ocean.json").json()

// fill colors for land and ocean on maps
land_color = "wheat"
ocean_color = "#8398aa"

// map -- globe
viewof map_globe = Plot.plot({
  width: 400,
  projection: {type: "orthographic", rotate: [-longitude, -latitude]},
  marks: [
    Plot.sphere(),
    Plot.graticule(),
    Plot.geo(ocean, {fill: ocean_color, opacity: 0.7}),
    Plot.geo(land, {fill: land_color}),
    Plot.line(df, {
      x: "longitude", y: "latitude", z: "segment_id",
      r: 0.7, stroke: "grey", strokeOpacity: 0.7,
    }),
    Plot.tip(df, Plot.pointer({
      x: "longitude", y: "latitude", title: (d) => d.segment_id,
      format: (d) => `${d}`, textPadding: 4,
    }))
  ]
})
```

::: {.small}
```{ojs globe-coords}
// selectors for coordinates of center of globe
viewof longitude = Inputs.range([-180, 180], {label: "Longitude", step: 1, value: -30})
viewof latitude = Inputs.range([-90, 90], {label: "Latitude", step: 1, value: 0})
```
:::

::::

-----

::: {layout="[[1], [0.5,1]]"}

```{ojs data-segment}
// indicator for whether any segments match selected filters
d_found = sf.length > 0
// display error is no matches
d_found ? html`<div></div>` : html`<p class="filter-error"><i class="bi bi-exclamation-triangle"></i> No segments match selected filters</p>`

// d grouped by segment ID
dg = d3.group(df, d => d.segment_id)
// selector for individual segment
viewof ds = Inputs.select(dg, {
  value: dg.get(112), // default segment
  format: ([k, v]) => `Segment ${k} (Flight ${v[0].flight_id})`
})

async function getSegment(seg_id) {
  const rows = await redivis
    .user('SDSS')
    .dataset('project_loon')
    .query(`
       SELECT *
       FROM loon
       WHERE segment_id = ${seg_id}
    `)
    .listRows()
  return rows;
}

viewof download_button_segment = {
  let button = Inputs.button("Download segment");
  button.addEventListener("click", async function () {
    const df_full = await getSegment(ds[0].segment_id);
    download("project_loon_filtered.csv", convertToCSV(df_full));
  });
  return button;
}

d_found ? html`<div class="segment-buttons">${viewof ds} ${viewof download_button_segment}</div>` : html`<div></div>`
```

```{ojs segments-maps}
// colors for start and end markers on maps
start_color = "var(--bs-success)"
end_color = "var(--bs-danger)"

// function for how to format data on map
print_date = d => d.toISOString().split('T')[0]

// map -- whole world equirectangular
d_found ? Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  projection: { type: "equirectangular" },
  marks: [
    Plot.frame(),
    Plot.graticule(),
    Plot.geo(ocean, {fill: ocean_color, opacity: 0.7}),
    Plot.geo(land, {fill: land_color}),
    // trajectory path
    Plot.line(ds, {
      x: "longitude", y: "latitude",
      r: 1, stroke: "black", strokeOpacity: 0.3,
    }),
    // start marker
    Plot.dot(ds.slice(0, 1), {
      x: "longitude", y: "latitude",
      r: 3, fill: start_color, symbol: "triangle"
    }),
    // start date text
    Plot.text(ds.slice(0, 1), {
      x: "longitude", y: "latitude",
      text: d => print_date(d.time), dy: -7, lineAnchor: "bottom", fontSize: 14
    }),
    // end marker
    Plot.dot(ds.slice(ds.length - 1, ds.length), {
      x: "longitude", y: "latitude",
      r: 3, fill: end_color, symbol: "square"
    }),
    // end date text
    Plot.text(ds.slice(ds.length - 1, ds.length), {
      x: "longitude", y: "latitude",
      text: d => print_date(d.time), dy: -7, lineAnchor: "bottom", fontSize: 14
    })
  ],
}) : html`<div></div>`

// function to find minimal radius circle that includes entire flight path
// (for defining domain for zoomed in azimuthal map)
get_circle = (seg) => {
  // find min and max longitude and latitude
  const minLon = d3.min(seg.map(d => d.longitude))
  const maxLon = d3.max(seg.map(d => d.longitude))
  const minLat = d3.min(seg.map(d => d.latitude))
  const maxLat = d3.max(seg.map(d => d.latitude))
  // define rectangle with min/max long/lat corners
  const corners = [[minLon, minLat], [minLon, maxLat], [maxLon, minLat], [maxLon, maxLat]]
  // find rectangle's center
  const center = [(minLon + maxLon) / 2, (minLat + maxLat) / 2]
  // find max of geo distances from each corner to center
  const dist = d3.max(corners, corner => d3.geoDistance(center, corner))
  // turn geo distance into radius
  const radius = dist * (180 / Math.PI)
  // define geo circle with computed center and radius
  const circle = d3.geoCircle().center(center).radius(radius)()
  return circle
}

// find above circle
circle = d_found ? get_circle(ds) : null

// map -- zoomed in azimuthal
d_found ? Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  projection: { type: "azimuthal-equidistant", domain: circle },
  marks: [
    Plot.frame(),
    Plot.graticule(),
    Plot.geo(ocean, {fill: ocean_color, opacity: 0.7}),
    Plot.geo(land, {fill: land_color}),
    // trajectory path
    Plot.line(ds, {
      x: "longitude", y: "latitude",
      r: 1, stroke: "black", strokeOpacity: 0.3,
    }),
    // start marker
    Plot.dot(ds.slice(0, 1), {
      x: "longitude", y: "latitude",
      r: 6, fill: start_color, symbol: "triangle"
    }),
    // start date text
    Plot.text(ds.slice(0, 1), {
      x: "longitude", y: "latitude",
      text: d => print_date(d.time), dy: -8, lineAnchor: "bottom", fontSize: 14
    }),
    // end marker
    Plot.dot(ds.slice(ds.length - 1, ds.length), {
      x: "longitude", y: "latitude",
      r: 6, fill: end_color, symbol: "square"
    }),
    // end date text
    Plot.text(ds.slice(ds.length - 1, ds.length), {
      x: "longitude", y: "latitude",
      text: d => print_date(d.time), dy: -8, lineAnchor: "bottom", fontSize: 14
    })
  ],
}) : html`<div></div>`
```

::: {.small}
```{ojs timeseries}
// timeseries -- altitude
viewof scatter_altitude = Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  width: 900,
  height: 200,
  inset: 8,
  grid: true,
  y: { label: "Altitude (meters)" },
  marks: [
    Plot.frame(),
    Plot.dot(ds, { x: "time", y: "altitude", r: 0.5 }),
  ]
})

d_found ? html`
  <form><label>Altitude</label></form>
  ${viewof scatter_altitude}
` : html`<div></div>`

// timeseries -- winds
winds = new Map([["Zonal (east-west)", "wind_u"],
                 ["Meridional (north-south)", "wind_v"]])
viewof y_wind = Inputs.select(winds, {label: "Wind"})

viewof scatter_wind = Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  width: 900,
  height: 200,
  inset: 8,
  grid: true,
  y: { label: "Velocity (meters/second)" },
  marks: [
    Plot.frame(),
    Plot.dot(ds, { x: "time", y: y_wind, r: 0.5 }),
  ]
})

d_found ? html`
  ${viewof y_wind}
  ${viewof scatter_wind}
` : html`<div></div>`

// timeseries -- fluxes
fluxes = new Map([["Total", "flux_total"],
                  ["Eastward", "flux_east"],
                  ["Westward", "flux_west"],
                  ["Northward", "flux_north"],
                  ["Southward", "flux_south"]])
viewof y_flux = Inputs.select(fluxes, {label: "Flux"})

viewof scatter_flux = Plot.plot({
  style: { fontFamily: "var(--sans-serif)" },
  width: 900,
  height: 200,
  inset: 8,
  grid: true,
//  y: { label: "Flux (millipascals)", transform: (f) => Math.abs(f * 1000) },
  y: { label: "Flux (log mPa)", transform: (f) => Math.log(Math.abs(f * 1000)) },
  marks: [
    Plot.frame(),
    Plot.dot(ds, { x: "time", y: y_flux, r: 0.5 }),
  ]
})

d_found ? html`
  ${viewof y_flux}
  ${viewof scatter_flux}
` : html`<div></div>`
```

:::

```{ojs table}
// data table for selected segment's data
d_found ? Inputs.table(ds) : html`<div></div>`
```

:::
